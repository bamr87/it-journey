---
name: 'Weekly Post Organization and Archiving'

on:
  schedule:
    # Run every Sunday at 2 AM UTC (weekly)
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in dry-run mode (preview changes only)'
        required: false
        default: false
        type: boolean
      archive_threshold_months:
        description: 'Archive posts older than this many months'
        required: false
        default: '3'
        type: string

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  organize-posts:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Setup Python Environment'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 'Install Python Dependencies'
        run: |
          python -m pip install --upgrade pip
          pip install PyYAML

      - name: 'Configure Git'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action - Post Organizer"

      - name: 'Check Script Permissions'
        run: |
          chmod +x scripts/development/content/organize-posts.sh
          ls -la scripts/development/content/organize-posts.sh

      - name: 'Run Post Organization (Dry Run Preview)'
        id: dry_run
        run: |
          echo "üîç Running dry-run to preview changes..."
          ./scripts/development/content/organize-posts.sh --dry-run --auto-confirm 2>&1 | tee dry_run_output.log
          
          # Extract summary for PR description
          echo "DRY_RUN_OUTPUT<<EOF" >> $GITHUB_OUTPUT
          cat dry_run_output.log >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 'Identify Posts for Archiving (3+ months old)'
        id: archive_check
        run: |
          echo "üìÖ Identifying posts older than ${{ github.event.inputs.archive_threshold_months || '3' }} months..."
          
          # Calculate cutoff date (3 months ago)
          cutoff_date=$(date -d "${{ github.event.inputs.archive_threshold_months || '3' }} months ago" +%Y-%m-%d)
          echo "Cutoff date: $cutoff_date"
          
          # Find posts older than cutoff date
          old_posts=()
          archive_candidates=""
          
          for file in pages/_posts/*.md pages/_posts/*/*.md; do
            if [[ -f "$file" && "$file" != *"2000-01-01-index.md"* ]]; then
              # Extract date from filename (YYYY-MM-DD format)
              filename=$(basename "$file")
              if [[ $filename =~ ^([0-9]{4}-[0-9]{2}-[0-9]{2}) ]]; then
                file_date="${BASH_REMATCH[1]}"
                if [[ "$file_date" < "$cutoff_date" ]]; then
                  old_posts+=("$file")
                  archive_candidates="$archive_candidates
          - $file (dated: $file_date)"
                fi
              fi
            fi
          done
          
          echo "ARCHIVE_CANDIDATES<<EOF" >> $GITHUB_OUTPUT
          echo "$archive_candidates" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "OLD_POSTS_COUNT=${#old_posts[@]}" >> $GITHUB_OUTPUT
          
          if [[ ${#old_posts[@]} -gt 0 ]]; then
            echo "üìÅ Found ${#old_posts[@]} posts older than $cutoff_date for potential archiving"
          else
            echo "‚úÖ No posts found older than $cutoff_date"
          fi

      - name: 'Run Actual Post Organization'
        id: organize
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: |
          echo "üöÄ Running actual post organization..."
          ./scripts/development/content/organize-posts.sh --auto-confirm 2>&1 | tee organize_output.log
          
          # Check if any files were moved
          if git diff --name-only | grep -q "pages/_posts"; then
            echo "CHANGES_MADE=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Post organization completed with changes"
          else
            echo "CHANGES_MADE=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è  No changes needed - posts already organized"
          fi
          
          # Capture organize output for PR
          echo "ORGANIZE_OUTPUT<<EOF" >> $GITHUB_OUTPUT
          cat organize_output.log >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 'Create Archive Directory Structure'
        if: ${{ steps.archive_check.outputs.OLD_POSTS_COUNT > 0 && github.event.inputs.dry_run != 'true' }}
        run: |
          echo "üì¶ Creating archive structure..."
          
          # Create archive directory with year-based structure
          current_year=$(date +%Y)
          mkdir -p "pages/_posts/archive/$current_year"
          
          echo "Created archive directory: pages/_posts/archive/$current_year"

      - name: 'Archive Old Posts'
        if: ${{ steps.archive_check.outputs.OLD_POSTS_COUNT > 0 && github.event.inputs.dry_run != 'true' }}
        run: |
          echo "üì¶ Archiving posts older than ${{ github.event.inputs.archive_threshold_months || '3' }} months..."
          
          cutoff_date=$(date -d "${{ github.event.inputs.archive_threshold_months || '3' }} months ago" +%Y-%m-%d)
          current_year=$(date +%Y)
          archived_count=0
          
          for file in pages/_posts/*.md pages/_posts/*/*.md; do
            if [[ -f "$file" && "$file" != *"2000-01-01-index.md"* ]]; then
              filename=$(basename "$file")
              if [[ $filename =~ ^([0-9]{4}-[0-9]{2}-[0-9]{2}) ]]; then
                file_date="${BASH_REMATCH[1]}"
                if [[ "$file_date" < "$cutoff_date" ]]; then
                  # Move to archive
                  archive_path="pages/_posts/archive/$current_year/$filename"
                  
                  echo "üì¶ Archiving: $file ‚Üí $archive_path"
                  mv "$file" "$archive_path"
                  archived_count=$((archived_count + 1))
                fi
              fi
            fi
          done
          
          echo "ARCHIVED_COUNT=$archived_count" >> $GITHUB_OUTPUT
          echo "‚úÖ Archived $archived_count posts to archive/$current_year/"

      - name: 'Generate Change Summary'
        id: summary
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: |
          echo "üìä Generating change summary..."
          
          # Count changes
          organized_files=$(git diff --name-only | grep "pages/_posts" | grep -v "archive" | wc -l || echo "0")
          archived_files="${{ steps.archive_check.outputs.OLD_POSTS_COUNT || 0 }}"
          
          # Generate summary
          summary="## üìã Weekly Post Organization Summary

          ### üìÅ Post Organization
          - **Files organized**: $organized_files
          - **Files archived**: $archived_files
          - **Archive threshold**: ${{ github.event.inputs.archive_threshold_months || '3' }} months
          
          ### üîç Archive Candidates
          ${{ steps.archive_check.outputs.ARCHIVE_CANDIDATES }}
          
          ### üìù Organization Details
          \`\`\`
          ${{ steps.organize.outputs.ORGANIZE_OUTPUT }}
          \`\`\`"
          
          echo "SUMMARY<<EOF" >> $GITHUB_OUTPUT
          echo "$summary" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 'Commit and Push Changes'
        if: ${{ steps.organize.outputs.CHANGES_MADE == 'true' && github.event.inputs.dry_run != 'true' }}
        run: |
          echo "üíæ Committing changes..."
          
          git add pages/_posts/
          
          # Create descriptive commit message
          archived_count="${{ steps.archive_check.outputs.ARCHIVED_COUNT || 0 }}"
          organized_count=$(git diff --cached --name-only | grep -v archive | wc -l || echo "0")
          
          commit_msg="ü§ñ Weekly post organization and archiving

          - Organized $organized_count posts into subdirectories
          - Archived $archived_count posts (>3 months old)
          - Automated via GitHub Actions on $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          
          Generated by: ${{ github.workflow }} workflow"
          
          git commit -m "$commit_msg" || echo "No changes to commit"
          git push origin main

      - name: 'Create Pull Request (if manual trigger with dry-run)'
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `## üîç Post Organization Preview (Dry Run)
            
            This is a preview of changes that would be made during the weekly post organization.
            
            ### üìÖ Archive Analysis
            Posts older than ${{ github.event.inputs.archive_threshold_months || '3' }} months: ${{ steps.archive_check.outputs.OLD_POSTS_COUNT }}
            
            ${{ steps.archive_check.outputs.ARCHIVE_CANDIDATES }}
            
            ### üìÅ Organization Preview
            \`\`\`
            ${{ steps.dry_run.outputs.DRY_RUN_OUTPUT }}
            \`\`\`
            
            To apply these changes:
            1. Merge this PR, or
            2. Run the workflow without dry-run mode
            `;
            
            console.log('Dry run completed - preview available in workflow logs');

      - name: 'Workflow Summary'
        if: always()
        run: |
          echo "## üéØ Weekly Post Organization Workflow Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Execution Mode**: ${{ github.event.inputs.dry_run == 'true' && 'Dry Run (Preview)' || 'Live Execution' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Archive Threshold**: ${{ github.event.inputs.archive_threshold_months || '3' }} months" >> $GITHUB_STEP_SUMMARY
          echo "**Posts for Archiving**: ${{ steps.archive_check.outputs.OLD_POSTS_COUNT }}" >> $GITHUB_STEP_SUMMARY
          echo "**Changes Made**: ${{ steps.organize.outputs.CHANGES_MADE }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "### üîç Dry Run Results" >> $GITHUB_STEP_SUMMARY
            echo "No changes were applied. Review the workflow logs for preview." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚úÖ Execution Results" >> $GITHUB_STEP_SUMMARY
            echo "Post organization and archiving completed successfully." >> $GITHUB_STEP_SUMMARY
          fi
