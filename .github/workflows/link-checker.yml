name: üîó Link Health Guardian

on:
  # Scheduled runs for proactive monitoring
  schedule:
    - cron: '0 6 * * 1'  # Every Monday at 6 AM UTC
    - cron: '0 18 * * 5' # Every Friday at 6 PM UTC
  
  # Manual trigger with comprehensive options
  workflow_dispatch:
    inputs:
      scope:
        description: 'Link checking scope'
        required: false
        default: 'website'
        type: choice
        options:
          - 'website'      # Full website check
          - 'internal'     # Internal links only
          - 'external'     # External links only
          - 'docs'         # Documentation only
          - 'posts'        # Blog posts only
          - 'quests'       # Quest content only
          - 'all'          # Everything including experimental
      
      analysis_level:
        description: 'Analysis depth and features'
        required: false
        default: 'comprehensive'
        type: choice
        options:
          - 'basic'        # Link checking only
          - 'standard'     # Link checking + analysis
          - 'comprehensive' # Full analysis + AI insights
          - 'ai-only'      # Skip link checking, analyze existing results
      
      create_issue:
        description: 'Create GitHub issue with results'
        required: false
        default: true
        type: boolean
      
      ai_analysis:
        description: 'Enable AI-powered analysis (requires OpenAI token)'
        required: false
        default: true
        type: boolean
      
      timeout:
        description: 'Request timeout in seconds'
        required: false
        default: '30'
        type: choice
        options:
          - '10'
          - '20'
          - '30'
          - '45'
          - '60'

env:
  OUTPUT_DIR: 'link-check-results'
  RESULTS_RETENTION_DAYS: 30

jobs:
  link-health-check:
    name: üîç Link Health Assessment
    runs-on: ubuntu-latest
    timeout-minutes: 45
    permissions:
      contents: read
      issues: write
    
    outputs:
      total-links: ${{ steps.extract-results.outputs.total-links }}
      broken-links: ${{ steps.extract-results.outputs.broken-links }}
      success-rate: ${{ steps.extract-results.outputs.success-rate }}
      issue-created: ${{ steps.extract-results.outputs.issue-created }}
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: üêç Setup Python Environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: üì¶ Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
      
      - name: üîç Run Link Health Guardian
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python3 scripts/link-checker.py \
            --scope "${{ github.event.inputs.scope || 'website' }}" \
            --analysis-level "${{ github.event.inputs.analysis_level || 'comprehensive' }}" \
            --timeout ${{ github.event.inputs.timeout || '30' }} \
            --output-dir "${{ env.OUTPUT_DIR }}" \
            --repository "${{ github.repository }}" \
            ${{ github.event.inputs.create_issue == 'true' && '--create-issue' || '' }} \
            ${{ github.event.inputs.ai_analysis == 'false' && '--no-ai' || '' }}
        
      - name: üìä Extract Results for Summary
        id: extract-results
        run: |
          # Extract statistics from the generated files
          if [[ -f "${{ env.OUTPUT_DIR }}/statistics.env" ]]; then
            source "${{ env.OUTPUT_DIR }}/statistics.env"
            echo "total-links=${TOTAL_COUNT:-0}" >> $GITHUB_OUTPUT
            echo "broken-links=${BROKEN_COUNT:-0}" >> $GITHUB_OUTPUT
            echo "success-rate=${SUCCESS_RATE:-0}" >> $GITHUB_OUTPUT
          else
            echo "total-links=0" >> $GITHUB_OUTPUT
            echo "broken-links=0" >> $GITHUB_OUTPUT
            echo "success-rate=0" >> $GITHUB_OUTPUT
          fi
          
          # Check if issue was created
          if [[ -f "${{ env.OUTPUT_DIR }}/issue_url.txt" ]]; then
            echo "issue-created=true" >> $GITHUB_OUTPUT
            echo "Issue URL: $(cat ${{ env.OUTPUT_DIR }}/issue_url.txt)"
          else
            echo "issue-created=false" >> $GITHUB_OUTPUT
          fi
        
      - name: üì¶ Archive Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: link-health-results-${{ github.run_number }}
          path: ${{ env.OUTPUT_DIR }}/
          retention-days: ${{ env.RESULTS_RETENTION_DAYS }}
          if-no-files-found: warn

  workflow-summary:
    name: üìä Workflow Summary
    runs-on: ubuntu-latest
    needs: link-health-check
    if: always()
    
    steps:
      - name: üìä Display Workflow Summary
        run: |
          echo "# üîó IT-Journey Link Health Guardian - Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìã Results Overview" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Links Checked**: ${{ needs.link-health-check.outputs.total-links }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Broken Links Found**: ${{ needs.link-health-check.outputs.broken-links }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Success Rate**: ${{ needs.link-health-check.outputs.success-rate }}%" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Issue Created**: ${{ needs.link-health-check.outputs.issue-created }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üéØ Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Scope**: ${{ github.event.inputs.scope || 'website' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Analysis Level**: ${{ github.event.inputs.analysis_level || 'comprehensive' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **AI Analysis**: ${{ github.event.inputs.ai_analysis || 'true' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timeout**: ${{ github.event.inputs.timeout || '30' }}s" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Health status
          broken_count=${{ needs.link-health-check.outputs.broken-links }}
          success_rate=${{ needs.link-health-check.outputs.success-rate }}
          
          echo "## üìà Health Status" >> $GITHUB_STEP_SUMMARY
          if [[ "$broken_count" -eq 0 ]]; then
            echo "‚úÖ **Excellent**: All links are healthy!" >> $GITHUB_STEP_SUMMARY
          elif [[ "$success_rate" -ge 95 ]]; then
            echo "‚ö†Ô∏è **Good**: Minor issues detected ($broken_count broken links)" >> $GITHUB_STEP_SUMMARY
          elif [[ "$success_rate" -ge 90 ]]; then
            echo "üü° **Fair**: Some issues need attention ($broken_count broken links)" >> $GITHUB_STEP_SUMMARY
          elif [[ "$success_rate" -ge 80 ]]; then
            echo "üü† **Poor**: Multiple issues detected ($broken_count broken links)" >> $GITHUB_STEP_SUMMARY
          else
            echo "üî¥ **Critical**: Major link health problems ($broken_count broken links)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Generated by IT-Journey Link Health Guardian v2.0*" >> $GITHUB_STEP_SUMMARY

      - name: üö® Set Workflow Status
        run: |
          broken_count=${{ needs.link-health-check.outputs.broken-links }}
          
          if [[ "$broken_count" -eq 0 ]]; then
            echo "‚úÖ Workflow completed successfully - no broken links found"
            exit 0
          elif [[ "$broken_count" -le 5 ]]; then
            echo "‚ö†Ô∏è Workflow completed with minor issues - $broken_count broken links"
            exit 0
          else
            echo "üö® Workflow completed with significant issues - $broken_count broken links"
            echo "This may require immediate attention to maintain site quality"
            exit 1
          fi
