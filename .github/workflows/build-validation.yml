name: 🏗️ Build Validation & Cross-Platform Testing

on:
  # Run on dependency changes and main branch pushes
  push:
    branches: [ main, master ]
    paths:
      - 'Gemfile'
      - 'Gemfile.lock'
      - '_config*.yml'
      - 'Dockerfile'
      - 'pages/**'
      - '_layouts/**'
      - '_includes/**'
      - '_sass/**'
      - 'assets/**'
  
  # Run on PRs
  pull_request:
    branches: [ main, master ]
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      test_docker:
        description: 'Test Docker build'
        required: false
        default: true
        type: boolean
      test_jekyll:
        description: 'Test Jekyll build'
        required: false
        default: true
        type: boolean

permissions:
  contents: read
  issues: write

env:
  RUBY_VERSION: '3.2'
  NODE_VERSION: '20'

jobs:
  jekyll-build-test:
    name: 🏗️ Jekyll Build Test
    runs-on: ubuntu-latest
    if: github.event.inputs.test_jekyll != 'false'
    
    steps:
    - name: 🏰 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: 🔧 Setup Ruby Environment
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true
    
    - name: 📊 Validate Bundle Dependencies
      run: |
        echo "## 💎 Bundle Dependency Validation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if bundle install; then
          echo "✅ Bundle install successful" >> $GITHUB_STEP_SUMMARY
          echo "BUNDLE_STATUS=success" >> $GITHUB_ENV
        else
          echo "❌ Bundle install failed" >> $GITHUB_STEP_SUMMARY
          echo "BUNDLE_STATUS=failed" >> $GITHUB_ENV
          exit 1
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Installed Gems:" >> $GITHUB_STEP_SUMMARY
        echo "```" >> $GITHUB_STEP_SUMMARY
        bundle list | head -20 >> $GITHUB_STEP_SUMMARY
        echo "```" >> $GITHUB_STEP_SUMMARY
    
    - name: 🔍 Check Configuration Validity
      run: |
        echo "## ⚙️ Configuration Validation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Test Jekyll doctor (config validation)
        if bundle exec jekyll doctor 2>&1 | tee doctor-output.log; then
          echo "✅ Jekyll configuration valid" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Jekyll configuration issues detected:" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          cat doctor-output.log >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: 🏗️ Test Jekyll Build Process
      id: jekyll_build
      run: |
        echo "## 🏗️ Jekyll Build Test" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Test Jekyll build with timeout and error capture
        if timeout 300 bundle exec jekyll build --verbose --trace 2>&1 | tee build-output.log; then
          echo "✅ Jekyll build completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "BUILD_STATUS=success" >> $GITHUB_ENV
          
          # Check for warnings
          if grep -i "warning\|error" build-output.log > warnings.log; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ Build completed with warnings:" >> $GITHUB_STEP_SUMMARY
            echo "```" >> $GITHUB_STEP_SUMMARY
            head -20 warnings.log >> $GITHUB_STEP_SUMMARY
            echo "```" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check output directory
          if [ -d "_site" ]; then
            SITE_SIZE=$(du -sh _site | cut -f1)
            FILE_COUNT=$(find _site -type f | wc -l)
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Build Statistics:**" >> $GITHUB_STEP_SUMMARY
            echo "- Site size: $SITE_SIZE" >> $GITHUB_STEP_SUMMARY
            echo "- Files generated: $FILE_COUNT" >> $GITHUB_STEP_SUMMARY
          fi
          
        else
          echo "❌ Jekyll build failed!" >> $GITHUB_STEP_SUMMARY
          echo "BUILD_STATUS=failed" >> $GITHUB_ENV
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Error details:**" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          tail -50 build-output.log >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
    
    - name: 📤 Upload Build Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: jekyll-build-logs
        path: |
          build-output.log
          doctor-output.log
          warnings.log
          _site/
        retention-days: 7

  docker-build-test:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    if: github.event.inputs.test_docker != 'false'
    
    steps:
    - name: 🏰 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: 🐳 Test Docker Build
      id: docker_build
      run: |
        echo "## 🐳 Docker Build Test" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Test Docker build with timeout
        if timeout 600 docker build -t it-journey-test . 2>&1 | tee docker-build.log; then
          echo "✅ Docker build successful" >> $GITHUB_STEP_SUMMARY
          echo "DOCKER_STATUS=success" >> $GITHUB_ENV
          
          # Get image information
          IMAGE_SIZE=$(docker images it-journey-test --format "table {{.Size}}" | tail -n 1)
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Docker Image Details:**" >> $GITHUB_STEP_SUMMARY
          echo "- Image size: $IMAGE_SIZE" >> $GITHUB_STEP_SUMMARY
          echo "- Ruby version in container: $(docker run --rm it-journey-test ruby --version)" >> $GITHUB_STEP_SUMMARY
          
        else
          echo "❌ Docker build failed!" >> $GITHUB_STEP_SUMMARY
          echo "DOCKER_STATUS=failed" >> $GITHUB_ENV
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Error details:**" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          tail -50 docker-build.log >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
    
    - name: 🧪 Test Container Functionality
      if: env.DOCKER_STATUS == 'success'
      run: |
        echo "## 🧪 Container Functionality Test" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Test that the container can start Jekyll (with a quick timeout)
        if timeout 30 docker run --rm -d --name test-container -p 4003:4002 it-journey-test; then
          sleep 10
          if docker ps | grep test-container; then
            echo "✅ Container started successfully" >> $GITHUB_STEP_SUMMARY
            docker stop test-container || true
          else
            echo "⚠️ Container failed to start properly" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "⚠️ Container start test failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Clean up
        docker stop test-container 2>/dev/null || true
        docker rm test-container 2>/dev/null || true
        docker rmi it-journey-test || true
    
    - name: 📤 Upload Docker Build Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: docker-build-logs
        path: docker-build.log
        retention-days: 7

  cross-platform-validation:
    name: 🌐 Cross-Platform Validation
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        ruby-version: ['3.1', '3.2']
        exclude:
          # Exclude some combinations to reduce CI time
          - os: windows-latest
            ruby-version: '3.1'
          - os: macos-latest
            ruby-version: '3.1'
    
    steps:
    - name: 🏰 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🔧 Setup Ruby Environment
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby-version }}
        bundler-cache: true
    
    - name: 📊 Cross-Platform Bundle Test
      run: |
        echo "Testing on ${{ matrix.os }} with Ruby ${{ matrix.ruby-version }}"
        bundle install
        bundle exec jekyll --version
        bundle exec jekyll doctor || echo "Doctor check completed with warnings"
    
    - name: 📊 Report Platform Results
      run: |
        echo "## 🌐 ${{ matrix.os }} - Ruby ${{ matrix.ruby-version }}" >> $GITHUB_STEP_SUMMARY
        echo "✅ Bundle install and basic Jekyll commands successful" >> $GITHUB_STEP_SUMMARY

  build-summary:
    name: 📊 Build Summary
    runs-on: ubuntu-latest
    needs: [jekyll-build-test, docker-build-test, cross-platform-validation]
    if: always()
    
    steps:
    - name: 📊 Generate Overall Summary
      run: |
        echo "## 🏗️ Build Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Jekyll Build Status
        if [ "${{ needs.jekyll-build-test.result }}" == "success" ]; then
          echo "✅ **Jekyll Build**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Jekyll Build**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Docker Build Status
        if [ "${{ needs.docker-build-test.result }}" == "success" ]; then
          echo "✅ **Docker Build**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Docker Build**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Cross-Platform Status
        if [ "${{ needs.cross-platform-validation.result }}" == "success" ]; then
          echo "✅ **Cross-Platform**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Cross-Platform**: Some issues detected" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.jekyll-build-test.result }}" != "success" ]; then
          echo "- 🔍 Review Jekyll build logs and fix configuration issues" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.docker-build-test.result }}" != "success" ]; then
          echo "- 🐳 Review Docker build logs and fix containerization issues" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.cross-platform-validation.result }}" != "success" ]; then
          echo "- 🌐 Review cross-platform compatibility issues" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.jekyll-build-test.result }}" == "success" ] && [ "${{ needs.docker-build-test.result }}" == "success" ]; then
          echo "- 🎉 All builds passing! Ready for deployment" >> $GITHUB_STEP_SUMMARY
        fi